{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "HEDDFUK"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DimBatchDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MaxMinBatchfileDSt",
								"type": "DatasetReference"
							},
							"name": "BatchFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MaxMinDimBatchDS",
								"type": "DatasetReference"
							},
							"name": "DimBatch"
						}
					],
					"transformations": [
						{
							"name": "ConvertToBatchName"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchFile as string",
						"}",
						"source(output(",
						"          BatchNumber as string,",
						"          MachineNumber as string,",
						"          ProductCode as string,",
						"          TimeStarted as string,",
						"          TimeStopped as string,",
						"          NumberProduced as string,",
						"          NumberRejected as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BatchFile",
						"BatchFile derive(BatchName = toString(BatchNumber),",
						"          BatchNumber = toInteger(BatchNumber)) ~> ConvertToBatchName",
						"ConvertToBatchName sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          BatchNumber as integer,",
						"          BatchName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchNumber,",
						"          BatchName",
						"     )) ~> DimBatch"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadManufacturingFact')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MaxMinBatchfileDSt",
								"type": "DatasetReference"
							},
							"name": "BatchFile"
						},
						{
							"dataset": {
								"referenceName": "DimMachineDS",
								"type": "DatasetReference"
							},
							"name": "DimMachine"
						},
						{
							"dataset": {
								"referenceName": "DimProductDS",
								"type": "DatasetReference"
							},
							"name": "DimProduct"
						},
						{
							"dataset": {
								"referenceName": "ManufacturingFactDS",
								"type": "DatasetReference"
							},
							"name": "ExistingManufacturingFact"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ManufacturingFactDS",
								"type": "DatasetReference"
							},
							"name": "ManufacturingFact"
						}
					],
					"transformations": [
						{
							"name": "CreateDerivedColumns"
						},
						{
							"name": "lookupMachineNumber"
						},
						{
							"name": "lookupProduct"
						},
						{
							"name": "selectNeededColumns"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "LookupExistingManufacturingFact"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchFile as string",
						"}",
						"source(output(",
						"          BatchNumber as short,",
						"          MachineNumber as short,",
						"          ProductCode as short,",
						"          TimeStarted as string,",
						"          TimeStopped as string,",
						"          NumberProduced as short,",
						"          NumberRejected as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BatchFile",
						"source(output(",
						"          MachineNumber as integer,",
						"          MachineName as string,",
						"          MachineType as string,",
						"          PlantNumber as integer,",
						"          Manufacturer as string,",
						"          DateOfPurchase as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimMachine",
						"source(output(",
						"          ProductCode as integer,",
						"          ProductName as string,",
						"          ProductSubtypeCode as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select ProductCode, ProductName, ProductSubtypeCode from [Manufacturing].[DimProduct]',",
						"     format: 'query') ~> DimProduct",
						"source(output(",
						"          AcceptedProducts as integer,",
						"          RejectedProducts as integer,",
						"          ElapsedTimeForManufacture as decimal(6,2),",
						"          DateOfManufacture as timestamp,",
						"          ProductCode as integer,",
						"          BatchNumber as integer,",
						"          MachineNumber as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ExistingManufacturingFact",
						"BatchFile derive(AcceptedProducts = toInteger(NumberProduced) -  toInteger(NumberRejected),",
						"          ElapsedTimeForManufacture = 100,",
						"          DateOfManufacture = toTimestamp(TimeStarted, 'dd/MM/yyyy')) ~> CreateDerivedColumns",
						"CreateDerivedColumns, DimMachine lookup(BatchFile@MachineNumber == DimMachine@MachineNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupMachineNumber",
						"lookupMachineNumber, DimProduct lookup(BatchFile@ProductCode == DimProduct@ProductCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupProduct",
						"lookupProduct select(mapColumn(",
						"          BatchNumber,",
						"          MachineNumber = BatchFile@MachineNumber,",
						"          ProductCode = BatchFile@ProductCode,",
						"          NumberRejected,",
						"          AcceptedProducts,",
						"          ElapsedTimeForManufacture,",
						"          DateOfManufacture,",
						"          MachineName,",
						"          MachineNumber = DimMachine@MachineNumber",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectNeededColumns",
						"LookupExistingManufacturingFact alterRow(updateIf(isNull(ExistingManufacturingFact@ProductCode)==false()&&isNull(ExistingManufacturingFact@BatchNumber)==false()&&isNull(ExistingManufacturingFact@MachineNumber)==false()),",
						"     insertIf(isNull(ExistingManufacturingFact@ProductCode)==true()&&isNull(ExistingManufacturingFact@BatchNumber)==true()&&isNull(ExistingManufacturingFact@MachineNumber)==true())) ~> alterRow1",
						"selectNeededColumns, ExistingManufacturingFact lookup(selectNeededColumns@BatchNumber == ExistingManufacturingFact@BatchNumber",
						"     && selectNeededColumns@ProductCode == ExistingManufacturingFact@ProductCode",
						"     && selectNeededColumns@MachineNumber == ExistingManufacturingFact@MachineNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupExistingManufacturingFact",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          AcceptedProducts as integer,",
						"          RejectedProducts as integer,",
						"          ElapsedTimeForManufacture as decimal(6,2),",
						"          DateOfManufacture as timestamp,",
						"          ProductCode as integer,",
						"          BatchNumber as integer,",
						"          MachineNumber as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:true,",
						"     keys:['BatchNumber','MachineNumber','ProductCode'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          AcceptedProducts = selectNeededColumns@AcceptedProducts,",
						"          RejectedProducts = NumberRejected,",
						"          ElapsedTimeForManufacture = selectNeededColumns@ElapsedTimeForManufacture,",
						"          DateOfManufacture = selectNeededColumns@DateOfManufacture,",
						"          ProductCode = selectNeededColumns@ProductCode,",
						"          BatchNumber = selectNeededColumns@BatchNumber,",
						"          MachineNumber = selectNeededColumns@MachineNumber",
						"     )) ~> ManufacturingFact"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportManufacturingDataPL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Clear Down Table",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "MaxMinSaleLS",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "truncate table manufacturing.DimBatch"
								}
							]
						}
					},
					{
						"name": "Record Load Metadatas",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Clear Down Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "MaxMinSaleLS",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "@concat('insert into dba.BatchFileLoadHistory select ''', pipeline().parameters.BatchFile, ''', getdate() , ''', pipeline().RunId, '''')\n\n\n",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Load ManufacturingFact",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Record Load Metadatas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadManufacturingFact",
								"type": "DataFlowReference",
								"parameters": {
									"BatchFile": {
										"value": "'@{pipeline().parameters.BatchFile}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"BatchFile": {
										"BatchFileImport": "Apr.csv"
									},
									"DimMachine": {},
									"DimProduct": {},
									"ExistingManufacturingFact": {},
									"ManufacturingFact": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"BatchFile": {
						"type": "string",
						"defaultValue": "Aug.csv"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/LoadManufacturingFact')]"
			]
		}
	]
}